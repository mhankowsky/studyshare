StudyShare

Daniel Deutsch - ddeutsch
Michael Hankowsky - mhankows
Tyler Healy - thealy

1. Javascript (TypeScript) - Our project's scripts are entirely written in TypeScript (albeit much of it does not use all of TypeScripts features). This includes over 600 lines of server side code and 1000+ lines of client side code. Within this code, we make use of the object-oriented nature of Javascript by creating our own objects to group related information together and to easily perform methods on these objects. We also use TypeScript's type system to ensure that our methods take in and return the correct objects.

2. HTML - Our project uses some of the special features included in HTML5 including:
	- <select> object (adding a class, creating an event, index.html:60-61, index.html:86-87)
	- different input objects including:
		- text (When creating an event [Info:], Searching for a class, index.html:63,83)
		- time (When creating an event [Start Time:, End Time:], index.html:67,71)
		- date (When creating an event [Start Date:, End Date:], index.html:65,69)
	
3. CSS - Our project contains a wide array of CSS techniques including:
	- CSS Reset (reset.css)
	- Fixed header (style.css:83-98)
	- Shadows (style.css:95-97)
	- Rounded Corners (style.css:149-163)
	
4. DOMManipulation - Our application uses only one page. That is, there is only one static html file the gets served and our entire application runs from this file. This requires an incredible amount of DOM Manipulation. To implement this, we developed a state machine, which keeps track of the current state the application is in. When a user switches pages (for example, goes to the newsfeed from their profile page), the state is switched. This triggers different functions that manipulate the HTML of the page to display the necessary information. This can be seen in studyshare.ts.
	
5. JQuery - As mentioned above, our application involves a lot of DOM manipulation. In order to update the HTML of our application, we use JQuery to 
both pluck the necessary elements from the HTML as well as dynamically add new ones. This can be seen throughout studyshare.ts.

6. Hammer.js - One interesting feature of our application is a side menu allowing users to filter the events in their newsfeed and navigate to their profile page. This menu can be opened by tapping on one of the header tabs. It also can be opened by simply swiping right on the screen (and closed by swiping left). This feature is implemented using Hammer.js and can be seen in studyshare.ts:1077-1086.

7. AJAX Client - Our application relies heavily on client-server communication as all the information for our application is stored on a server-side database. The client side of the application makes multiple get (studyshare.ts:1020-1047), put (studyshare.ts:558-576), and post (studyshare.ts:1000-1016) requests.

8. AJAX Server - As mentioed earlier, our application relies heavily on client-server communication. Our app.ts file, which contains our server-side code, is over 600 lines long. In addition to serving static files and handling requests, our server also handles communication with facebook using passport (app.ts:133-184, 229-299).

9. node.js - Our application uses the following node modules:
	- passport
	- express
	- mongodb
	- mongoose
	- request

10. Server-side databases - Our application uses mongodb (mongoose is used for server-database communication). Our application maintains four databases:
	- classes
	- users
	- events
	- buildings
The schema's for these databases can be seen in app.ts:61-109.
