<<<<<<< HEAD
When clicking on a profile page, many users noted that it was weird to have the friends list on a profile suddenly pop up after a 5 second lag or so.  The reason behind this lag was because we were not appending the friends list div element to the DOM until a response was received from our Facebook ajax request.  Instead, we added the div right away with a "loading" text so the user would know that it was waiting to receive the friends list.  This can be seen in the "loading_friends_list" screenshot in the after_feedback folder, as opposed to the "loading_profile" -> "profile" transition in the before_feedback folder.
=======
Studyshare

Daniel Deutsch - ddeutsch
Michael Hankowsky - mhankows
Tyler Healy - thealy

This is the feedback that we have received (and the implementations we have made) from the 12 user studies that were conducted over the past week:

When clicking on a profile page, many users noted that it was weird to have the friends list on a profile suddenly pop up after a 5 second lag or so.  The reason behind this lag was because we were not appending the friends list div element to the doom until a response was received from our Facebook ajax request.  Instead, we added the div right away with a "loading" text so the user would know that it was waiting to receive the friends list.  This can be seen in the "loading_friends_list" screenshot in the after_feedback folder, as opposed to the "loading_profile" -> "profile" transition in the before_feedback folder.
>>>>>>> 80f1986746f6fe0ddd5179e65341c7cbace09e56

It was also noted that there was no feedback given when the "Join Event" button is clicked.  This is because we were adding the user to the database in the backend, but not locally refreshing the DOM on the frontend until the user refreshed the page.  This was fixed by locally adding the user to the DOM when join_event button is clicked.  However, the poor feedback was compounded by confusion over when you could actually join an event.  Previously, you could join events that had already ended.  Furthermore, you could click the button, but nothing would actually happen if you had previously joined the event.  This was fixed by adding an error message that can be seen in the "already_ended" and "already_joined" screenshots in the after_feedback folder.

Users also noted that although users could join existing events, there was no way to leave an event before it was finished. Users can now leave any event that they are currently participating in. If they are the last user to be attending that event, the event is deleted when they leave. The Leave Event button can be seen in the "new_newsfeed" screenshot.

In addition to this, multiple users noted that old events were still being displayed in the newsfeed. This was confusing, as they could no longer join the event, so it was not of any use to them to know this information. We updated this by removing old events from the database every time a client makes a request to load the events from the database. In this way, old events will never be shown when the newsfeed is loaded.

Also, there were complaints about the general organization of the newsfeed. Events were listed in a seemingly random order, not ordered over any measure. In addition to this, users noted that it would be nice to distinguish current events from events that will happen in the future, as they are often of more significance to the user. The newsfeed is now ordered by the end time, showing the events that will end the soonest at the top of the newsfeed. Also, current events are now distinguishable by having an orange border around the event. These both can be seen in "new_newsfeed" in after_feedback.

There were complaints that it was hard to read the date text (because of the font color), and the way the date was displayed was too formal (included 24-hour time, time zone, offset and such).  This is visible in the "newsfeed" screenshot in before_feedback, and the new and improved "time_display" in after_feedback.

In addition to this, users complained that there was no way to distinguish what can be clicked from what cannot. This was especially true for links for users, classes, and locations. This can be seen in the "newsfeed" screenshot in before_feedback. This was fixed by making all links a different color than the plain text, which is a default black in almost all cases. This can be seen in "new_newsfeed" in after_feedback.

In the same vein as the previous feedback, there were certain links that triggered events, such as joining an event or adding a class, that users felt should be more distinguishable from plain text. We combated this by placing these commands in clickable buttons, and proving more feedback when they are clicked (noted in other sections). The Join/Leave Event button can be seen in "new_newsfeed."

Clicking the "add class" button in the classes tab also gave no feedback, which users complained about.  The messages that are now shown can be seen in "already_joined_class" and "successfully_joined_class", in after_feedback.

Users also were confused as to what the purpose of adding classes was, since it is nice that you can see everyone that has added a class on a class page, but there is no incentive to add the classes you are in.  Also, it was pointless as when adding an event, all classes in the database were listed anyway, which could be overwhelming.  This was remedied by only listing classes you have added into the add_event page, as you would never want to add an event for a class that you were not even in.  Some people noted that they have side projects that aren't necessarily related to classes at CMU, but they would still want to broadcast as events.  So, we added an "other" option that is always visible under the classes in add_event.

Users also noted that there was a general lack of navigation and that is was a hard to understand how to navigate without being explained how to do it. Thus we plan on added way more styles so that things look "clickable" and changing the navigation header up to make navigation more clear. 

Multiple users tried to add events with incorrect times (either an end time that occurred in the past, or with an end time occurring before a start time). They were surprised to see that the events were created and displayed in the newsfeed, and noted that there should be an error when a user attempts to do this. Now, if a user attempts to create an event that falls under the two cases mentioned above, an error message is displayed on the add event page. This can be seen in the "event_error" screenshot in after_feedback.

One user also pointed out that most mobile apps have a fixed navigation bar either at the top of the bottom. As evident in "newsfeed" in before_feedback, you can see that our navigation bar is at the top of the page. However, when there is a long list of events on the newsfeed, as there often will be with many users, you can scroll down through the events and the navigation bar disappears. You can now see in "new_newsfeed" that the navigation bar is fixed, and events scroll behind the navigation bar.

Soon to be implemented user feedback:

A couple users suggested a re-design of our navigation bar which involved changing what buttons were in the menu. The suggestion that we are most likely going to implement involves the following:

Left-most: Tab that opens up the side-menu which can now only be opened with a swipe of the finger. Most users did not realize that there was a side menu because there is no prompt.
Middle-left: Newsfeed
Middle-right: Profile Page
Right-most: Add event

This would remove the add class button. However, users felt this button was not important enough to be included in the navigation bar. In replace of this navigation button, it was suggested that a button be included on the profile page where it lists a users class.
